import telebot
from telebot import types
import logging

from telebot.types import KeyboardButton, ReplyKeyboardMarkup

API_TOKEN = ''

bot = telebot.TeleBot(API_TOKEN)

user_data = {}

menu_data = {
    'uz': {
        'menu_text': '2D Game Developer Unity kursining birinchi bepul darsiga ro ªyxatdan o ªtganingiz uchun raxmat.',
        'option1': 'üéÆDarsni qanday ko‚Äôraman',
        'option2': 'üéÅ Sovg‚Äôa olish',
        'option3': 'üí≥Kursni sotib olish',
        'option4': 'üôã Savol bermoqchiman',
        'back': 'Orqaga'
    },
    'ru': {
        'menu_text': '–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –Ω–∞ –ø–µ—Ä–≤—ã–π –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π —É—Ä–æ–∫ –∫—É—Ä—Å–∞ –†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫ 2D –∏–≥—Ä Unity.',
        'option1': 'üéÆ–ö–∞–∫ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—Ä–æ–∫',
        'option2': 'üéÅ –ó–∞–±—Ä–∞—Ç—å –ø–æ–¥–∞—Ä–æ–∫',
        'option3': 'üí≥–ü—Ä–∏–æ–±—Ä–µ—Å—Ç–∏  –≤–µ—Å—å –∫—É—Ä—Å',
        'option4': 'üôã –•–æ—á—É —Å–ø—Ä–æ—Å–∏—Ç—å?',
        'back': '–ù–∞–∑–∞–¥'
    }
}

menu_data_2 = {
    'uz': {
        'option1': 'Siz ko\'rsatgan elektron pochta manziliga login, parol va shaxsiy kabinetingizga kirish havolasi bilan xat yuborildi.Dars allaqachon mavjud, tomosha qilingüòúAgar xat kelmagan bo\'lsa, spam papkasini tekshiring.',
        'option2': 'Va\'da qilinganidek, biz Unity ishlab chiqaruvchisidan "Yo\'l xaritasi"ni taqdim etamiz. Pastdagi havoladan yuklab olishingiz mumkin https://drive.google.com/file/d/19byBVLHKSE3AD-x_fVZre1OtrprdfLIs/view?usp=sharing',
        'option3': 'üí≥PayMe bilan to ªlashda kurs narxi 6 000 000 so ªmni tashkil qiladi 2 000 000 so\'m. Kurs narxiga o\'qituvchi suhbati yordami va 10 soatdan ortiq video kontent kiradi.',
        'option4': 'Savollaringiz bormi?',
        'back': 'Orqaga'
    },
    'ru': {
        'option1': '–ù–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –≤–∞–º–∏ –ø–æ—á—Ç—É –ø—Ä–∏—à–ª–æ –ø–∏—Å—å–º–æ —Å –ª–æ–≥–∏–Ω–æ–º,–ø–∞—Ä–æ–ª–µ–º –∏ —Å—Å—ã–ª–∫–æ–π –¥–ª—è –≤—Ö–æ–¥–∞ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç.–£—Ä–æ–∫ —É–∂–µ —Ç–∞–º,–ø—Ä–∏—è—Ç–Ω–æ–≥–æ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞üòú–ï—Å–ª–∏ –ø–∏—Å—å–º–æ –Ω–µ –ø—Ä–∏—à–ª–æ,–ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–∞–ø–∫—É —Å–ø–∞–º.',
        'option2': '–ö–∞–∫ –∏ –æ–±–µ—â–∞–ª–∏, –¥–∞—Ä–∏–º Road Map (–î–æ—Ä–æ–∂–Ω—É—é –∫–∞—Ä—Ç—É) —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ Unity. –°–∫–∞—á–∞—Ç—å –º–æ–∂–Ω–æ –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∏–∂–µ https://drive.google.com/file/d/19byBVLHKSE3AD-x_fVZre1OtrprdfLIs/view?usp=sharing',
        'option3': '–ü—Ä–∏ –æ–ø–ª–∞—Ç–µ PayMe —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—Å–∞ 6 000 000 UZS 2 000 000 UZS. –í —Å—Ç–æ–∏–º–æ—Å—Ç—å –∫—É—Ä—Å–∞ –≤—Ö–æ–¥–∏—Ç –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ –∏ –±–æ–ª–µ–µ 10 —á–∞—Å–æ–≤ –≤–∏–¥–µ–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞.',
        'option4': '–£ –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã?',
        'back': '–ù–∞–∑–∞–¥'
    }
}

text_phone_request = {
    'uz': {
        'phone_request': 'Agar sizda biron bir savol bo\'lsa yoki kurs haqida ko\'proq bilmoqchi bo\'lsangiz, pastdagi formada telefon raqamingizni qoldiring.',
        'btn_text': 'Nomer jonatish',
        'reply': 'Rahmat, tez orada siz bilan bog\'lanamiz.'
    },
    'ru': {
        'phone_request': '–ï—Å–ª–∏ —É –≤–∞—Å –ø–æ—è–≤–∏–ª–∏—Å—å –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ –æ –∫—É—Ä—Å–µ,–æ—Å—Ç–∞–≤—å—Ç–µ —Ç–µ–ª–µ—Ñ–æ–Ω –≤ —Ñ–æ—Ä–º–µ –Ω–∏–∂–µ.',
        'btn_text': '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä',
        'reply': '–°–ø–∞—Å–∏–±–æ,–º—ã —Å–∫–æ—Ä–æ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ–º—Å—è.'
    }
}


# Function to handle the main menu
def handle_main_menu(message):
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("RU", callback_data="lang_ru"))
    markup.add(types.InlineKeyboardButton("UZ", callback_data="lang_uz"))

    bot.send_message(message.chat.id, "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –û–Ω–ª–∞–π–Ω —à–∫–æ–ª—É –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è Codemoon.–Ø —Ç–≤–æ–π –ª–∏—á–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫.–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –æ–±—â–µ–Ω–∏—è.\n\n‚ûñ\n\n Codemoon Online dasturlash maktabiga xush kelibsiz. Men sizning shaxsiy yordamchingizman. Muloqotni davom ettirish uchun tilni tanlang.")
    bot.send_message(message.chat.id,'–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫\nTil tanlang', reply_markup=markup)


# Function to handle 'Buy a House' option
def handle_selection(chat_id, lang):
    markup = types.InlineKeyboardMarkup()
    user_data[chat_id]['lang'] = lang
    # Example price ranges, adjust as needed
    markup.add(types.InlineKeyboardButton(menu_data[lang]['option1'], callback_data="view_class"))
    markup.add(types.InlineKeyboardButton(menu_data[lang]['option2'], callback_data="take_gift"))
    markup.add(types.InlineKeyboardButton(menu_data[lang]['option3'], callback_data="buy"))
    markup.add(types.InlineKeyboardButton(menu_data[lang]['option4'], callback_data="ask"))

    markup.add(types.InlineKeyboardButton(menu_data[lang]['back'], callback_data="back_m1"))

    bot.send_message(chat_id, menu_data[lang]['menu_text'], reply_markup=markup)


# Function to handle 'Rent a House' option

# Function to handle the price selection
def handle_price_selection(chat_id, price_range):
    user_data[chat_id]['price_range'] = price_range
    markup = types.InlineKeyboardMarkup()
    markup.add(types.InlineKeyboardButton("–£–∫–∞–∑–∞—Ç—å –Ω–∞ –∫–∞—Ä—Ç–µ", callback_data="put_map"),
               types.InlineKeyboardButton("–î–∞–ª–µ–µ", callback_data="next"))
    bot.send_message(chat_id, "–í—ã —Ö–æ—Ç–∏—Ç–µ –≤—ã–±—Ä–∞—Ç—å —É–¥–æ–±–Ω–æ–µ –≤–∞–º –º–µ—Å—Ç–æ –≤ –≥–æ—Ä–æ–¥–µ?", reply_markup=markup)


# Start command
@bot.message_handler(commands=['start'])
def start(message):
    user_data[message.chat.id] = {}
    handle_main_menu(message)


# Callback query handler
@bot.callback_query_handler(func=lambda call: True)
def query_handler(call):
    try:
        chat_id = call.message.chat.id

        if call.data.startswith("lang_"):
            lang = call.data.split('_')[1]
            handle_selection(chat_id, lang)

        elif call.data.startswith("back_"):
            if call.data.split('_')[1] == 'm1':
                handle_main_menu(call.message)
            else:
                handle_selection(chat_id, user_data[chat_id]['lang'])
        elif call.data == "view_class":
            markup = create_keyboard(user_data[call.message.chat.id]['lang'])
            bot.send_message(chat_id=call.message.chat.id,
                             text=menu_data_2[user_data[call.message.chat.id]['lang']]['option1'],
                             reply_markup=markup)
        elif call.data == "take_gift":
            markup = create_keyboard(user_data[call.message.chat.id]['lang'])
            bot.send_message(chat_id=call.message.chat.id,
                             text=menu_data_2[user_data[call.message.chat.id]['lang']]['option2'],
                             reply_markup=markup)
        elif call.data == "buy":
            markup = create_keyboard(user_data[call.message.chat.id]['lang'])
            bot.send_message(chat_id=call.message.chat.id,
                             text=menu_data_2[user_data[call.message.chat.id]['lang']]['option3'],
                             reply_markup=markup)

        elif call.data == "ask":
            markup = create_phone_request(user_data[call.message.chat.id]['lang'])
            bot.send_message(chat_id=call.message.chat.id,
                             text=text_phone_request[user_data[call.message.chat.id]['lang']]['phone_request'],
                             reply_markup=markup)

        elif call.data == "next":
            process_search_for_house(call.message)

    except Exception as e:
        print(e)
        print(e.args)


def create_keyboard(lang):
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    btn1 = types.KeyboardButton(menu_data_2[lang]['back'] + ' ')
    markup.add(btn1)
    return markup


def create_phone_request(lang):
    markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
    phone_button = types.KeyboardButton(text_phone_request[lang]['btn_text'], request_contact=True)
    markup.add(phone_button)
    return markup


@bot.message_handler(func=lambda message: True)
def echo_all(message):
    try:
        if message.text == menu_data_2['ru']['back'] or message.text == menu_data_2['uz']['back']:
            handle_selection(message.chat.id, user_data[message.chat.id]['lang'])
        if message.contact:
            bot.send_message(message.chat.id, text_phone_request[user_data[message.message.chat.id]['lang']]['reply'])
            handle_main_menu(message)
    except Exception as e:
        print(e)

@bot.message_handler(content_types=['contact'])
def handle_contact(message):
    try:
        bot.send_message(message.chat.id, text_phone_request[user_data[message.chat.id]['lang']]['reply'])
        handle_selection(message.chat.id, user_data[message.chat.id]['lang'])
    except Exception as e:
        print(e)

# Run the bot


def process_search_for_house(message):
    pass


bot.polling(none_stop=True)
